
GccApplication9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007a9  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068f  00000000  00000000  00000985  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029c  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000012b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cc  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000015  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001715  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 56 00 	call	0xac	; 0xac <main>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <init>:
void set_right_motor_speed(int speed_mode){
	OCR0A = speed_mode;
}

void set_left_motor_speed(int speed_mode){
	OCR2A = speed_mode;
  80:	56 9a       	sbi	0x0a, 6	; 10
  82:	23 9a       	sbi	0x04, 3	; 4
  84:	84 b1       	in	r24, 0x04	; 4
  86:	83 60       	ori	r24, 0x03	; 3
  88:	84 b9       	out	0x04, r24	; 4
  8a:	84 b1       	in	r24, 0x04	; 4
  8c:	84 61       	ori	r24, 0x14	; 20
  8e:	84 b9       	out	0x04, r24	; 4
  90:	08 95       	ret

00000092 <init_motor>:
  92:	93 e8       	ldi	r25, 0x83	; 131
  94:	94 bd       	out	0x24, r25	; 36
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	85 bd       	out	0x25, r24	; 37
  9a:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
  9e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
  a2:	08 95       	ret

000000a4 <set_right_motor_rotation>:
}

void set_right_motor_rotation(void){
	RIGHT_MOTOR_ROTATION_PORT |= (1 << RIGHT_MOTOR_ROTATION_PORT_NUM_CLOCK);
  a4:	28 9a       	sbi	0x05, 0	; 5
  a6:	08 95       	ret

000000a8 <set_left_motor_rotation>:
}

void set_left_motor_rotation(void){
	LEFT_MOTOR_ROTATION_PORT |= (1 << LEFT_MOTOR_ROTATION_PORT_NUM_CCLOCK);
  a8:	2c 9a       	sbi	0x05, 4	; 5
  aa:	08 95       	ret

000000ac <main>:
}


int main(void)
{
	init();
  ac:	0e 94 40 00 	call	0x80	; 0x80 <init>
	init_motor();
  b0:	0e 94 49 00 	call	0x92	; 0x92 <init_motor>
	set_left_motor_rotation();
  b4:	0e 94 54 00 	call	0xa8	; 0xa8 <set_left_motor_rotation>
	set_right_motor_rotation();
  b8:	0e 94 52 00 	call	0xa4	; 0xa4 <set_right_motor_rotation>
void set_right_motor_speed(int speed_mode){
	OCR0A = speed_mode;
}

void set_left_motor_speed(int speed_mode){
	OCR2A = speed_mode;
  bc:	88 ec       	ldi	r24, 0xC8	; 200
  be:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	TCCR2A = (1<<WGM21) | (1<<WGM20) | (1 << COM2A1);
	TCCR2B = (1 << CS20);
}

void set_right_motor_speed(int speed_mode){
	OCR0A = speed_mode;
  c2:	82 e3       	ldi	r24, 0x32	; 50
  c4:	87 bd       	out	0x27, r24	; 39
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <main+0x1a>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
